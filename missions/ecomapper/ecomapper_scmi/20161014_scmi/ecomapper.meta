// MOOS community specs
ServerHost = $(SERVER_HOST) //192.168.1.11
ServerPort = $(VPORT) //9000
Community  = $(VNAME) //ecomapper
NoNetwork = true
#ifdef SIMULATION yes
Simulation = true
#endif

// warp? (increase sim speed, ok as long as no process reads system time)
MOOSTimeWarp = $(WARP)

// Location
#include $(PLUG_DIR)/plug_origin_warp.moos

// Antler: list which processes to start
ProcessConfig = ANTLER
{
  MSBetweenLaunches = 200

  Run = MOOSDB        @ NewConsole = false
  Run = pLogger       @ NewConsole = false
  Run = uProcessWatch @ NewConsole = false

  // behaviors
  Run = pHelmIvP      @ NewConsole = false

  // add the frontseat interface
#ifdef SIMULATION no
  Run = iOceanServerComms @ NewConsole = false
#endif
#ifdef SIMULATION yes
  // simulate the AUV
  Run = uSimMarine @ NewConsole = false
  Run = pMarinePID @ NewConsole = false
#endif
  
  // node report
  Run = pNodeReporter @ NewConsole = false
  
  // pShare for pMarineViewer
  Run = pShare @ NewConsole = false
  
  Run = pSamplePoints @ NewConsole = false
//  Run = pGP @ NewConsole = false
}

#include $(PLUG_DIR)/plug_pLogger.moos

#include $(PLUG_DIR)/plug_pHelmIvP.moos

#ifdef SIMULATION no
#include $(PLUG_DIR)/plug_iOceanServerComms.moos
#endif
#ifdef SIMULATION yes
#include $(PLUG_DIR)/plug_uSimMarine.moos
#include $(PLUG_DIR)/plug_pMarinePID.moos
#endif

#include $(PLUG_DIR)/plug_pNodeReporter.moos

#include ../plugs/plug_pShare.moos

#include $(PLUG_DIR)/plug_uProcessWatch.moos


//--------------------------------------------------
// pSamplePoints configuration block
//
ProcessConfig = pSamplePoints
{
  AppTick   = 2
  CommsTick = 2
  
  // pass on the lawnmower params
  lawnmower_config = $(LAWNMOWER_NS)

  // division factor for grid spacing (increase resolution vs lawnmower spec)
  division_factor = 2

  // define what output variable name to use
  // for publishing list of sample points
  output_var = SAMPLE_POINTS

  // define what output variable name to use
  // for publishing sample points grid spec
  output_var_specs = SAMPLE_POINTS_SPECS
}

//--------------------------------------------------
// pGP configuration block
//
ProcessConfig = pGP
{
  AppTick   = 2
  CommsTick = 2

  // GP or log GP?
  use_log_gp = true

  // define the names of input & output variables
  input_var_data = YSI_TEMP
  input_var_sample_points = SAMPLE_POINTS
  input_var_sample_points_specs = SAMPLE_POINTS_SPECS
  input_var_adaptive_trigger = WPT_CYCLE_FINISHED
  input_var_share_data = INCOMING_DATA
  output_var_predictions = GP_PREDICTIONS
  output_var_share_data = SHARE_DATA

  // define the filename for saving GP predictions
  output_filename_prefix = predictions

  // define the prediction interval (predict every X seconds)
  prediction_interval = 300

  // number of vehicles (data exchange?)
  nr_vehicles = 1

  // elementary coordination (implicit): share data at set intervals
  timed_data_sharing = false
  output_var_handshake_data_sharing = SEND_DATA_HANDSHAKE
  input_var_handshake_data_sharing = RECEIVE_DATA_HANDSHAKE

  // data sharing through acomms
  acomms_sharing = false
}


