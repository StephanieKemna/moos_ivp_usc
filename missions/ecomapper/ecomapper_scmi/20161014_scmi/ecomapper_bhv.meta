//****************************************************************************//
// initialize MOOS variables
//

initialize DEPLOY = true
initialize MOOS_MANUAL_OVERRIDE = false
initialize SAFETY = true

initialize WPT_UNDERWAY = true
initialize SURV_DIRECTION = ns
initialize RETURN = false
initialize RETURN_AT_DEPTH = true

// tmp hack
initialize NAV_ALTITUDE = 10

set MODE = ACTIVE {
  DEPLOY = true
  RETURN = false
}
set MODE = INACTIVE {
  DEPLOY = false
  RETURN = false
}
set MODE = RETURN {
  DEPLOY = true
  RETURN = true
}
set MODE = FINISHED {
  DEPLOY = false
  RETURN = true
}

set MODE = INITIAL_WPT {
  MODE = ACTIVE
  WPT_UNDERWAY = true
} SURVEY

set MODE = SURV_NS { 
  MODE = ACTIVE:SURVEY
  SURV_DIRECTION = ns
} SURV_EW

set MODE = RETURN_DEP {
  MODE = RETURN
  RETURN_AT_DEPTH = true
} RETURN_SURF

//****************************************************************************//
// Behaviors
// documentation: http://oceanai.mit.edu/moos-ivp-pdf/moosivp-helm.pdf

// Waypoint control ////////////////////////////////////////////////////////////
Behavior = BHV_Waypoint
{ 
  name      = waypoints_start_surface
  pwt       = 100

  condition = (MODE == INITIAL_WPT)

  duration = no-time-limit
  
  endflag = WPT_UNDERWAY=false
  // endflag = RETURN = true
  
  // be able to run again after completion
  perpetual = true

  // be able to update below bhv parameters through this var
  updates   = WPT_UPDATE

  // bhv params
  points = $(WAYPOINTS)
  // speed in m/s
  speed = $(START_SPEED)
  
  capture_radius = 5.0
  slip_radius = 15.0
  capture_line = true
  
  // track-line following
  lead = 15
  lead_damper = 1
  
  // repeat waypoints?
  repeat = 0

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=blue, edge_color=pink
  visual_hints = vertex_size=4, edge_size=1
}

// depth bhv to go with wpt bhv
Behavior = BHV_ConstantDepth
{
  name = depth_start_surface
  pwt = 100

  condition = (MODE == INITIAL_WPT)
  
  duration = no-time-limit
  perpetual = true

  updates = WPT_UPDATE

  depth = $(START_DEPTH)
}

// Survey //////////////////////////////////////////////////////////////////////
Behavior = BHV_Waypoint
{ 
  name      = ns_survey
  pwt       = 100
  
  condition = (MODE == SURV_NS)
  endflag = SURV_DIRECTION=ew
  
  updates   = SURVEY_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  // note: x, y are middle of lawnmower area
  points = $(LAWNMOWER_NS)
  order  = reverse

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

Behavior = BHV_Waypoint
{ 
  name      = ew_survey
  pwt       = 100

  condition = (MODE == SURV_EW)
  
  endflag = RETURN=true
  
  updates   = SURVEY_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  points = $(LAWNMOWER_EW)
  order  = normal

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

// depth bhv to go with wpt bhv
#ifdef SURV_DEPTH_BHV constant
Behavior = BHV_ConstantDepth
{
  name = survey_depth
  pwt = 100

  condition = (MODE == SURVEY)
  
  duration = no-time-limit
  perpetual = true

  updates = SURVEY_UPDATES

  depth = $(SURV_DEPTH)
}
#endif
#ifdef SURV_DEPTH_BHV yoyo
Behavior = BHV_YoYo
{
  name = depth_survey_yoyo
  pwt = 100

  condition = (MODE == SURVEY)
  
  duration = no-time-limit
  perpetual = true

  updates = SURVEY_UPDATES

  // upper depth
  min_depth = 5
  // lower depth
  max_depth = 10
  // altitude
  min_altitude = 2
}
#endif

// RETURN: safely return at depth first, then last bit surfaced
Behavior = BHV_Waypoint
{ 
  name      = end_wpt_at_depth
  pwt       = 100

  condition = (MODE == RETURN_DEP)
  
  endflag = RETURN_AT_DEPTH=false
  
  duration = no-time-limit
  // be able to run again after completion
  perpetual = false

  // bhv params
  points = $(RETURN_WPT_DEP)
  order=normal
  
  speed = 0.5   // m/s
  capture_radius = 5.0
  slip_radius = 15.0
  capture_line = true
  // track-line following
  lead = 8
  lead_damper = 1
  // repeat waypoints?
  repeat = 0

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=blue, edge_color=pink
  visual_hints = vertex_size=4, edge_size=1
}

// depth bhv to go with wpt bhv
Behavior = BHV_ConstantDepth
{
  name = end_depth_at_depth
  pwt = 100

  condition = (MODE == RETURN_DEP)
  
  duration = no-time-limit
  perpetual = true

  updates = END_WPT_UPDATE

  depth = $(SURV_DEPTH)
}

Behavior = BHV_Waypoint
{ 
  name      = end_wpt_at_surface
  pwt       = 100

  condition = (MODE == RETURN_SURF)
  
  endflag = VEHICLE_UNDERWAY=false
  endflag = DEPLOY=false
  
  duration = no-time-limit
  // be able to run again after completion
  perpetual = false

  // bhv params
  points = $(RETURN_WPT_SURF)
  order=normal
  
  speed = 0.5   // m/s
  capture_radius = 5.0
  slip_radius = 15.0
  capture_line = true
  // track-line following
  lead = 8
  lead_damper = 1
  // repeat waypoints?
  repeat = 0

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=blue, edge_color=pink
  visual_hints = vertex_size=4, edge_size=1
}

// depth bhv to go with wpt bhv
Behavior = BHV_ConstantDepth
{
  name = end_depth_at_surface
  pwt = 100

  condition = (MODE == RETURN_SURF)
  
  duration = no-time-limit
  perpetual = true

  updates = END_WPT_UPDATE

  depth = 0
}


//------------------------------------------------------------------------------
Behavior = BHV_OpRegion
{
  name       = opregion
  pwt        = 200
  condition  = SAFETY = true
  
  updates    = OPREGION_UPDATE

  polygon = 965,870:800,1155:1090,1285:1180,1090
  trigger_entry_time = 1
  trigger_exit_time  = 1

  max_time = 7200
  max_depth = 11
  min_altitude = 0

  reset_var = OPREGION_RESET
}

