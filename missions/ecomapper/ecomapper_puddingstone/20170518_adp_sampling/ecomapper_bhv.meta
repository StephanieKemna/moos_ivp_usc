//****************************************************************************//
// initialize MOOS variables
//

initialize DEPLOY = true
initialize MOOS_MANUAL_OVERRIDE = false
initialize SAFETY = true

initialize INPUT = waypoints //loiter // or 'hsd' or 'waypoints'
initialize WPT_UNDERWAY = true

// set vars for mode structure
// start off with NS pilot survey
initialize  STAGE=survey
//initialize  PILOT=true
initialize  PILOT=false
initialize  DIRECTION=northsouth

// note, ADAPTIVE_WPTS is set by launch script
initialize  ADAPTIVE_WPTS=$(ADAPTIVE_WPTS)
initialize  ADP_PTS=static

// tmp hack
initialize NAV_ALTITUDE = 10

initialize START=first

//****************************************************************************//
// MODE structure for easier assigning behaviors to mission states
//
Set MODE = MISSION {
  DEPLOY = true
} NOT_DEPLOYED

Set MODE = SURVEY {
  MODE = MISSION
  STAGE = survey
}
Set MODE = SURFACE_DATA_SHARING {
  MODE = MISSION
  STAGE = data_sharing
}
Set MODE = HP_OPTIM {
  MODE = MISSION
  STAGE = hpoptim
} RETURN

Set MODE = PILOT {
  MODE = MISSION:SURVEY
  PILOT = true
} ACTUAL

Set MODE = PILOT_NS {
  MODE = MISSION:SURVEY:PILOT
  DIRECTION = northsouth
} PILOT_EW

Set MODE = ADAPTIVE {
  MODE = MISSION:SURVEY:ACTUAL
  ADAPTIVE_WPTS = yes
} LAWNMOWER

Set MODE = LAWNMOWER_NS {
  MODE = MISSION:SURVEY:ACTUAL:LAWNMOWER
  DIRECTION = northsouth
} LAWNMOWER_EW

Set MODE = ADAPTIVE_STATIC {
  MODE = MISSION:SURVEY:ACTUAL:ADAPTIVE
  ADP_PTS = static
} ADAPTIVE_ADP

//****************************************************************************//
// Behaviors
//

//---------   Control behaviors   -------------
// Separate high level control bhvs for separate parts of mission
//
Behavior = BHV_Waypoint
{
  name      = surface_start
  pwt       = 100
  condition = MODE==ADAPTIVE_STATIC
  condition = START=first
  
  endflag   = START=second
  
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  // note: x, y are middle of lawnmower area
  
  //TODO change pilot for cross/random adaptive
  points = 445,995

  order  = normal

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}
Behavior = BHV_Waypoint
{
  name      = survey_start
  pwt       = 100
  condition = MODE==ADAPTIVE_STATIC
  condition = START=second
  
  endflag   = ADP_PTS=adaptive
  endflag   = ADAPTIVE_WPT_UPDATES=points=750,1000
  
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  // note: x, y are middle of lawnmower area
  
  //TODO change pilot for cross/random adaptive
  #ifdef ADAPTIVE_WPTS yes
  points = $(PILOT_PTS)
  #else
  points = 0,0
  #endif

  order  = normal

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

Behavior = BHV_Loiter
{
  name = loiter_hp_optim
  pwt = 100
  condition = MODE==HP_OPTIM
  perpetual = true
  
  endflag = STAGE=return

  speed = 1.5

  clockwise = true
  capture_radius = 2
  slip_radius = 5
  acquire_dist = 10  
  
  polygon = format=radial,x=440,y=970,radius=10,pts=4,snap=1,label=hp_optimization_loiter
}

// adaptive survey /////////////////////////////////////////////////////////////
Behavior = BHV_Waypoint
{
  name      = adaptive_survey
  pwt       = 100
  condition = MODE==ADAPTIVE_ADP

  updates   = ADAPTIVE_WPT_UPDATES
  perpetual = true

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // backup mission for if updates do not come through
  points = 455,980:455,965:430,965:430,980:455,980 //-155,-65:76,-65:76,-90:-155,-90
  order  = normal

  repeat = 100 // # times to repeat waypoints list
  // var/val pair to publish at end of each cycle
  cycleflag = WPT_CYCLE_FINISHED=true
  wptflag = WPT_REACHED=true

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}
// add bhv for data sharing on surface
Behavior = BHV_Waypoint
{
  name = data_sharing_wpt
  pwt  = 100
  condition = MODE==SURFACE_DATA_SHARING

  updates = ADAPTIVE_WPT_UPDATES
  perpetual = true

  speed = 1.5

  slip_radius = 15.0  // m
  lead = 10           // m

  // backup mission for if updates do not come through
  points = 455,980:455,965:430,965:430,980:455,980
  order  = normal

  repeat = 100 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}
// need depth bhv for data sharing on surface (see bottom)

// lawnmower survey ////////////////////////////////////////////////////////////
Behavior = BHV_Waypoint
{ 
  name      = ns_survey
  pwt       = 100
  condition = MODE==LAWNMOWER_NS
  endflag   = DIRECTION=eastwest
  updates   = WAYPOINT_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  // note: x, y are middle of lawnmower area
  #ifdef ADAPTIVE_WPTS no
  points = $(LAWNMOWER_NS)
  #else
  points = 0,0
  #endif
  
  order  = normal

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

Behavior = BHV_Waypoint
{ 
  name      = ew_survey
  pwt       = 100
  condition = MODE==LAWNMOWER_EW
  endflag   = STAGE=hpoptim
  updates   = WAYPOINT_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  #ifdef ADAPTIVE_WPTS no
  points = $(LAWNMOWER_EW)
  #else
  points = 0,0
  #endif

  order  = reverse

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

// return //////////////////////////////////////////////////////////////////////
Behavior = BHV_Waypoint
{
  name       = bhv_waypt_return
  pwt        = 100
  condition  = MODE==RETURN
  perpetual  = true
  endflag    = RETURN = false
  endflag    = DEPLOY = false

  speed = 1.5
  radius = 2.0
  nm_radius = 8.0
  points = 430,950
}

// UUV - depth bhvs ////////////////////////////////////////////////////////////

//----------------------------------------------
// survey
Behavior = BHV_ConstantDepth
{
  name      = bhv_start_surface_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==SURVEY
  condition = START=first

  depth = $(WPT_DEPTH)
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}
Behavior = BHV_ConstantDepth
{
  name      = bhv_survey_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==SURVEY
  condition = START=second

  depth = $(WPT_DEPTH)
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}

// depth during hp optim loiters
Behavior = BHV_ConstantDepth
{
  name      = bhv_hp_optim_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==HP_OPTIM

  depth = 0  // m
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}
// depth during surface data sharing

Behavior = BHV_ConstantDepth
{
  name      = bhv_data_sharing_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==SURFACE_DATA_SHARING

  depth = 0  // m
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}

// depth during return
Behavior = BHV_ConstantDepth
{
  name      = bhv_return_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==RETURN

  depth = 0  // m
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}


//---------   Safety behaviors   -------------
// Run always when running behaviors
//
Behavior = BHV_OpRegionBounce
{
  // not really used, just some big square, because we want to
  // simulate sensing the environment rather than forcing constraints
  name = bhv_opregion_bounce
  pwt = 200
  duration = no-time-limit
  condition = MODE==MISSION

  polygon = $(OPREGION) 
  max_depth = 15 // match with BHV_OpRegionBounceDepth
  min_altitude = 2
  max_time = 25200

  trigger_entry_time = 1.0
  trigger_exit_time = 1.0
  visual_hints = edge_size=2.0,vertex_size=2.0

  // bounce additions
  bounce_buffer = 20 // meters, when to start bouncing
  bounce_buffer_depth = 5 // meters, match with BHV_OpRegionBounceDepth
  no_zone_factor = .2
}
Behavior = BHV_OpRegionBounceDepth
{
  name = bhv_opregion_depth_bounce
  pwt = 200
  duration = no-time-limit
  condition = MODE==MISSION

  max_depth = 15  // set to the max depth of the lake?
  min_altitude = 2
  // if buffer is not set, it is set to 0, which is in fact inactive
  // bounce_buffer_depth: size of the buffer for depth bouncing
  bounce_buffer_depth = 3
  // no_zone_factor: used for: no_zone = buffer * no_zone_factor
  no_zone_factor = .2
}


