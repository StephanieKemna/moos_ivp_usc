//*******************************************************
// Vehicle Configuration File
//

// MOOS community specs
NoNetwork = true
ServerHost = $(SERVER_HOST)
ServerPort = $(VPORT)
// Community name IS the vehicle name
Community  = $(VNAME)

Simulator  = true

modem_id_lookup_path = modemidlookup.txt
modem_id = $(MODEMID)

// warp the simulation?
#include $(PLUG_DIR)/plug_origin_warp.moos

//------------------------------------------------------------
ProcessConfig = ANTLER
{
  MSBetweenLaunches = 200

  // moos db, moos util apps
  Run = MOOSDB             @ NewConsole = false
  Run = pLogger            @ NewConsole = false
  #ifdef USE_GUI true
  Run = uProcessWatch      @ NewConsole = true
  #else
  Run = uProcessWatch      @ NewConsole = false
  #endif

  // vehicle sim
  Run = uSimMarine         @ NewConsole = false
  Run = pMarinePID         @ NewConsole = false

  // behaviors
  Run = pHelmIvP           @ NewConsole = false

  // generate 'node reports'
  Run = pNodeReporter      @ NewConsole = false

  // pShare to shoreside
  Run = pHostInfo @ NewConsole = false ~ pHostInfo
  Run = uFldNodeBroker @ NewConsole = false
  Run = uFldMessageHandler @ NewConsole = false
  Run = pShare @ NewConsole = false

  // add other processes here
  //uSBSConfig = -geometry,80x20+2000+0,-bg,lightgreen,-fg,black
  Run = uSimBioSensor @ NewConsole = false
  //,XConfig=uSBSConfig

//  #ifdef USE_GUI true
//  pGPConfig = -geometry,80x20+2000+400,-bg,lightblue,-fg,black
//  Run = pGP_AUV @ NewConsole = true,XConfig=pGPConfig
//  #else
  Run = pGP_AUV @ NewConsole = false
//  #endif

  //pSPConfig = -geometry,80x20+2000+800,-bg,lightyellow,-fg,black
  Run = pSamplePoints @ NewConsole = false
  //,XConfig=pSPConfig

  Run = pLonLatToWptUpdate @ NewConsole = false

  #ifdef ADAPTIVE_WPTS true
  Run = uTimerScript @ NewConsole = false
  Run = pPublishAfterX @ NewConsole = false
  #endif

}
//------------------------------------------------------------

// utils
#include $(PLUG_DIR)/plug_pLogger.moos
#include $(PLUG_DIR)/plug_uProcessWatch.moos

// vehicle simulation
#include $(PLUG_DIR)/plug_uSimMarine.moos
#include $(PLUG_DIR)/plug_pMarinePID.moos

// behaviors
#include $(PLUG_DIR)/plug_pHelmIvP.moos

// generate 'node reports'
#include $(PLUG_DIR)/plug_pNodeReporter.moos

// comms to shoreside
#include $(PLUG_DIR)/plug_pHostInfo.moos
#include $(PLUG_DIR)/plug_uFldNodeBroker.moos
#include $(PLUG_DIR)/plug_uFldMessageHandler.moos
#include $(PLUG_DIR)/plug_pShare.moos

// add other processes here
#include $(PLUG_DIR)/plug_uSimBioSensor.moos

//--------------------------------------------------
// pGP_AUV configuration block
//
ProcessConfig = pGP_AUV
{
  AppTick   = 2
  CommsTick = 2

  // verbose: true or false
  verbose = true

  // GP or log GP?
  use_log_gp = true

  // define the names of input variables
  input_var_data = SIM_DATA
  input_var_sample_points = SAMPLE_POINTS
  input_var_sample_points_specs = SAMPLE_POINTS_SPECS
  input_var_adaptive_trigger = WPT_REACHED

  output_var_predictions = GP_PREDICTIONS

  // define the filename for saving GP predictions
  output_filename_prefix = $(PREDICTIONS_PREFIX)

  // define the prediction interval (predict every X seconds)
  prediction_interval = 300

  // run in adaptive mode?
#ifdef ADAPTIVE_WPTS true
  adaptive = true
#else
  adaptive = false
#endif

  area_buffer = 5

  // take one in X data points for HP optimization
  downsample_factor = 4

  // specify method of hyperparameter optimization ('cg' vs 'rprop')
  // default: rprop
#ifdef USE_CG true
  hp_optim_method = cg
#else
  hp_optim_method = rprop
#endif

  // number of iterations for CG/RProp
  hp_optim_iterations = 50
  
  // choice of path planning method, and their parameters
  // options: greedy, recursive_greedy
  path_planning_method = greedy
  recursive_greedy_budget = 5
}

//--------------------------------------------------
// pSamplePoints configuration block
//
ProcessConfig = pSamplePoints
{
  AppTick   = 2
  CommsTick = 2

  // potential process parameters would go here
  lawnmower_config = $(LAWNMOWER_CONFIG)

  // division factor for grid spacing (increase resolution vs lawnmower spec)
  division_factor = 2

  // define what output variable name to use
  // for publishing list of sample points
  output_var = SAMPLE_POINTS

  // define what output variable name to use
  // for publishing sample points grid spec
  output_var_specs = SAMPLE_POINTS_SPECS
}

//--------------------------------------------------
// pLonLatToWptUpdate configuration block
//
ProcessConfig = pLonLatToWptUpdate
{
  AppTick   = 2
  CommsTick = 2

  // specify variable names
  input_var_lonlat = GP_PREDICTIONS
  output_var_wpt_update = ADAPTIVE_WPT_UPDATES
}


#ifdef ADAPTIVE_WPTS true
//--------------------------------------------------
// pPublishAfterX configuration block
//
ProcessConfig = pPublishAfterX
{
  AppTick   = 2
  CommsTick = 2

  // which var/val to monitor
  publish_after_var = DEPLOY
  publish_after_val = true

  // how many seconds after above var/val should we publish?

// old area
//  publish_after_secs = 8571:8660 //TODO update

  publish_after_secs = 6400:6450 //TODO update

  // the var/val set to publish
  publish_var = MISSION_TIME
  publish_val = end
  
  // skip first message?
  skip_first = false
}
#endif


// stop the random waypoints in the static state
#ifdef ADP_START_PILOT random
ProcessConfig = uTimerScript
{
  AppTick = 4
  CommsTick = 4

  verbose = true

  event = var=ADP_PTS,val="adaptive",time=986:987
  event = var=ADAPTIVE_WPT_UPDATES,val="points=700,1100",time=996:997

  reset_max = 0
//  reset_time = all-posted
  reset_var = UTS_RESET

  status_var = UTS_STATUS
}
