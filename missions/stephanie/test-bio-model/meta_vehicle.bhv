//****************************************************************************//
// initialize MOOS variables
//

// start with waiting
initialize  DEPLOY = false
initialize  MOOS_MANUAL_OVERRIDE=false

// set vars for mode structure
// start off with NS pilot survey
initialize  STAGE=survey
initialize  PILOT=true
initialize  DIRECTION=northsouth
// note, ADAPTIVE_WPTS is set by launch script
initialize  ADAPTIVE_WPTS=$(ADAPTIVE_WPTS)

// quick fix opregion altitude requirement
#ifdef VTYPE UUV
initialize   NAV_ALTITUDE=100
#endif

//****************************************************************************//
// MODE structure for easier assigning behaviors to mission states
//
Set MODE = MISSION {
  DEPLOY = true
} NOT_DEPLOYED

Set MODE = SURVEY {
  MODE = MISSION
  STAGE = survey
}
Set MODE = HP_OPTIM {
  MODE = MISSION
  STAGE = hpoptim
} RETURN

Set MODE = PILOT {
  MODE = MISSION:SURVEY
  PILOT = true
} ACTUAL

Set MODE = PILOT_NS {
  MODE = MISSION:SURVEY:PILOT
  DIRECTION = northsouth
} PILOT_EW

Set MODE = ADAPTIVE {
  MODE = MISSION:SURVEY:ACTUAL
  ADAPTIVE_WPTS = yes
} LAWNMOWER

Set MODE = LAWNMOWER_NS {
  MODE = MISSION:SURVEY:ACTUAL:LAWNMOWER
  DIRECTION = northsouth
} LAWNMOWER_EW

//****************************************************************************//
// Behaviors
//

//---------   Safety behaviors   -------------
// Run always when running behaviors
//
Behavior = BHV_AvoidCollision
{
  name       = bhv_avdcollision
  pwt        = 200 // higher weight
  condition  = MODE==MISSION
  updates    = CONTACT_INFO
  endflag    = CONTACT_RESOLVED = $[CONTACT]
  templating = spawn

             contact = to-be-set
    on_no_contact_ok = true
         extrapolate = true
               decay = 30,60

        pwt_outer_dist = 15
        pwt_inner_dist = 10
        completed_dist = 16
     min_util_cpa_dist = 5
     max_util_cpa_dist = 15
             pwt_grade = linear
   bearing_line_config = white:0, green:0.65, yellow:0.8, red:1.0
}
Behavior = BHV_OpRegionBounce
{
  // not really used, just some big square, because we want to
  // simulate sensing the environment rather than forcing constraints
  name = bhv_opregion_bounce
  pwt = 200
  duration = no-time-limit
  condition = MODE==MISSION

  polygon = label,OpRegion:400,940:400,1045:480,1215:600,1300:1000,1300:1000,940
  max_depth = 20 // match with BHV_OpRegionBounceDepth
  min_altitude = 10
  max_time = 23400
  trigger_entry_time = 1.0
  trigger_exit_time = 1.0
  visual_hints = edge_size=2.0,vertex_size=2.0
  // bounce additions
  bounce_buffer = 20 // meters, when to start bouncing
  bounce_buffer_depth = 5 // meters, match with BHV_OpRegionBounceDepth
  no_zone_factor = .2
}
#ifdef VTYPE UUV
Behavior = BHV_OpRegionBounceDepth
{
  name = bhv_opregion_depth_bounce
  pwt = 200
  duration = no-time-limit
  condition = MODE==MISSION

  max_depth = 20  // set to the max depth of the lake?
  min_altitude = 10
  // if buffer is not set, it is set to 0, which is in fact inactive
  // bounce_buffer_depth: size of the buffer for depth bouncing
  bounce_buffer_depth = 5
  // no_zone_factor: used for: no_zone = buffer * no_zone_factor
  no_zone_factor = .2
}
#endif

//---------   Control behaviors   -------------
// Separate high level control bhvs for separate parts of mission
//
Behavior = BHV_Waypoint
{
  name      = ns_pilot_survey
  pwt       = 100
  condition = MODE==PILOT_NS
  endflag   = DIRECTION = eastwest
  updates   = PILOT_WPT_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  // note: x, y are middle of lawnmower area
  points = $(PILOT_LAWNMOWER_NS)
  order  = normal

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

Behavior = BHV_Waypoint
{
  name      = ew_pilot_survey
  pwt       = 100
  condition = MODE==PILOT_EW
  endflag   = PILOT=false
  endflag   = STAGE=hpoptim
  updates   = PILOT_WPT_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  points = $(PILOT_LAWNMOWER_EW)
  order  = reverse

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

Behavior = BHV_Loiter
{
  name = loiter_hp_optim
  pwt = 100
  condition = MODE==HP_OPTIM
  perpetual = true

  speed = 1.5

  clockwise = true
  capture_radius = 2
  slip_radius = 5
  acquire_dist = 10  
  
  polygon = $(HP_LOITER)
}

#ifdef ADAPTIVE_WPTS yes
Behavior = BHV_Waypoint
{
  name      = adaptive_survey
  pwt       = 100
  condition = MODE==ADAPTIVE

  updates   = ADAPTIVE_WPT_UPDATES
  perpetual = true

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // backup mission for if updates do not come through
  points = $(WAYPOINTS) //-155,-65:76,-65:76,-90:-155,-90
  order  = normal

  repeat = 100 // # times to repeat waypoints list
  // var/val pair to publish at end of each cycle
  cycleflag = WPT_CYCLE_FINISHED=true
  wptflag = WPT_REACHED=true

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}
#endif

#ifdef ADAPTIVE_WPTS no
Behavior = BHV_Waypoint
{ 
  name      = ns_survey
  pwt       = 100
  condition = MODE==LAWNMOWER_NS
  endflag   = DIRECTION=eastwest
  updates   = WAYPOINT_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  // note: x, y are middle of lawnmower area
  points = $(LAWNMOWER_NS)
  order  = normal

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}

Behavior = BHV_Waypoint
{ 
  name      = ew_survey
  pwt       = 100
  condition = MODE==LAWNMOWER_EW
  endflag   = STAGE=hpoptim
  updates   = WAYPOINT_UPDATES
  perpetual = false

  speed = 1.5         // m/s

  radius = 5.0        // m
  slip_radius = 15.0  // m
  lead = 10           // m

  // do lawnmower
  points = $(LAWNMOWER_EW)
  order  = reverse

  repeat = 0 // # times to repeat waypoints list

  visual_hints = nextpt_color=red, nextpt_lcolor=green
  visual_hints = vertex_color=yellow, edge_color=white
  visual_hints = vertex_size=3, edge_size=2
}
#endif

//----------------------------------------------
Behavior = BHV_Waypoint
{
  name       = bhv_waypt_return
  pwt        = 100
  condition  = MODE==RETURN
  perpetual  = true
  endflag    = RETURN = false
  endflag    = DEPLOY = false

  speed = 1.5
  radius = 2.0
  nm_radius = 8.0
  points = $(START_POS)
}

#ifdef VTYPE UUV
//----------------------------------------------
// survey
Behavior = BHV_ConstantDepth
{
  name      = bhv_survey_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==SURVEY

  depth = $(START_DEPTH)  // m
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}
// depth during hp optim loiters
Behavior = BHV_ConstantDepth
{
  name      = bhv_hp_optim_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==HP_OPTIM

  depth = 0  // m
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}
// depth during return
Behavior = BHV_ConstantDepth
{
  name      = bhv_return_depth
  pwt       = 100
  duration  = no-time-limit
  condition = MODE==RETURN

  depth = 0  // m
  peakwidth = 3     // m
  basewidth = 2     // m
  summitdelta = 20  // m
}
#endif
