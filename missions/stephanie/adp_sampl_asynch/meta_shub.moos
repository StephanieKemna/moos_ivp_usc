//*******************************************************
// Vehicle Configuration File
//

// MOOS community specs
NoNetwork = true
ServerHost = $(SERVER_HOST)
ServerPort = $(VPORT)
// Community name IS the vehicle name
Community  = $(VNAME)

Simulator  = true

modem_id_lookup_path = modemidlookup.txt
modem_id = $(MODEMID)

// warp the simulation?
#include $(PLUG_DIR)/plug_origin_warp.moos

//------------------------------------------------------------
ProcessConfig = ANTLER
{
  MSBetweenLaunches = 200

  // moos db, moos util apps
  Run = MOOSDB             @ NewConsole = false
  Run = pLogger            @ NewConsole = false
  #ifdef USE_GUI yes
  Run = uProcessWatch      @ NewConsole = true
  #else
  Run = uProcessWatch      @ NewConsole = false
  #endif

  // vehicle sim
  Run = uSimMarine         @ NewConsole = false
  Run = pMarinePID         @ NewConsole = false

  // behaviors
  Run = pHelmIvP           @ NewConsole = true

  // generate 'node reports'
  Run = pNodeReporter      @ NewConsole = false

  // surface communications
  Run = pHostInfo @ NewConsole = false
  Run = uFldNodeBroker @ NewConsole = false
  Run = uFldMessageHandler @ NewConsole = false
  Run = pShare @ NewConsole = false

  // add other processes here
  Run = pGP @ NewConsole = false
  Run = pSamplePoints @ NewConsole = false

  // end the mission
  Run = pPublishAfterX @ NewConsole = false
}
//------------------------------------------------------------

// utils
#include $(PLUG_DIR)/plug_pLogger.moos
#include $(PLUG_DIR)/plug_uProcessWatch.moos

// vehicle simulation
#include $(PLUG_DIR)/plug_uSimMarine.moos
#include $(PLUG_DIR)/plug_pMarinePID.moos

// behaviors
#include $(PLUG_DIR)/plug_pHelmIvP.moos

// generate 'node reports'
#include $(PLUG_DIR)/plug_pNodeReporter.moos
// node_reports are passed via uFldNodeBroker and pShare through shoreside

// simulate acoustic communications
#include $(PLUG_DIR)/plug_pHostInfo.moos
#include $(PLUG_DIR)/plug_uFldNodeBroker.moos
#include $(PLUG_DIR)/plug_uFldMessageHandler.moos
#include $(PLUG_DIR)/plug_pShare.moos

// add other processes here

//--------------------------------------------------
// pGP configuration block
//
ProcessConfig = pGP
{
  AppTick   = 2
  CommsTick = 2

  // verbose: true or false
  verbose = true

  // GP or log GP?
  use_log_gp = true

  // define the names of input variables
  input_var_data = SIM_DATA
  input_var_sample_points = SAMPLE_POINTS
  input_var_sample_points_specs = SAMPLE_POINTS_SPECS
  input_var_adaptive_trigger = WPT_REACHED
  input_var_share_data = INCOMING_DATA
  output_var_predictions = GP_PREDICTIONS
  output_var_share_data = SHARE_DATA

  // define the filename for saving GP predictions
  output_filename_prefix = $(PREDICTIONS_PREFIX)

  // define the prediction interval (predict every X seconds)
#ifdef SURVEY_AREA bigger2
  #ifdef NR_VEHICLES 3
  prediction_interval = 480 // every 8 min, timed given LM duration 3AUVs
  #endif
  #ifdef NR_VEHICLES 2
  prediction_interval = 600 // every 10 min, reduce nr save moments for 2AUVs
  #endif
#else
  prediction_interval = 300
#endif

  // number of vehicles (data exchange?)
  nr_vehicles = $(NR_VEHICLES)

  // run in adaptive mode?
  adaptive = false

  // elementary coordination (implicit): share data at set intervals
#ifdef USE_TDS yes
  timed_data_sharing = true
  // interval between data sharing events (seconds)
  data_sharing_interval = 600
#else
  timed_data_sharing = false
#endif
  // vars for data sharing
  output_var_handshake_data_sharing = SEND_DATA_HANDSHAKE
  input_var_handshake_data_sharing = RECEIVE_DATA_HANDSHAKE

  // data sharing through acomms
  acomms_sharing = false

  use_voronoi = false
  
  // take one in X data points for HP optimization
#ifdef SURVEY_AREA bigger2
  downsample_factor = 6
#else
  downsample_factor = 4
#endif

  // specify method of hyperparameter optimization ('cg' vs 'rprop')
  hp_optim_method = cg
  // number of iterations for CG/RProp
  hp_optim_iterations = 100

  // max nr seconds to wait for other vehicles (req, handshake, tx)
  // use default -- shouldn't matter for surface hub
  
  // work with surface hub? (true, false)
  surface_hub = true
}

//--------------------------------------------------
// pSamplePoints configuration block
//
ProcessConfig = pSamplePoints
{
  AppTick   = 2
  CommsTick = 2

  // potential process parameters would go here
  lawnmower_config = $(LAWNMOWER_CONFIG)

  // division factor for grid spacing (increase resolution vs lawnmower spec)
  division_factor = 2

  // define what output variable name to use
  // for publishing list of sample points
  output_var = SAMPLE_POINTS

  // define what output variable name to use
  // for publishing sample points grid spec
  output_var_specs = SAMPLE_POINTS_SPECS
}

// end the mission

//--------------------------------------------------
// pPublishAfterX configuration block
//
ProcessConfig = pPublishAfterX
{
  AppTick   = 2
  CommsTick = 2

  // which var/val to monitor
  publish_after_var = DEPLOY
  publish_after_val = true

  // how many seconds after above var/val should we publish?
  // you can give either a number, or a range (eg. 10:20)
//  publish_after_secs = 

#ifdef SURVEY_AREA bigger2
  // area bigger2
  // old area
  #ifdef NR_VEHICLES 2
    publish_after_secs = 12030:12236 // from b22b lm sims (luna)
  #endif
  #ifdef NR_VEHICLES 3
    publish_after_secs = 5387:5617 // from b25g lm sims
  #endif
#else  
  // old area
  #ifdef NR_VEHICLES 2
    publish_after_secs = 3359:3531 
  #endif
  #ifdef NR_VEHICLES 3
    publish_after_secs = 2641:2818 //2552:2756
  #endif
#endif

  // the var/val set to publish
  publish_var = MISSION_TIME
  publish_val = end
  
  // skip first message?
  skip_first = false
}
